from typing import Any, Dict, Optional, Protocol, Sequence, Tuple

from typing_extensions import runtime_checkable


@runtime_checkable
class Context(Protocol):
    def peer(self) -> str: ...
    def peer_identities(self) -> Optional[Sequence[Any]]: ...
    def peer_identity_key(self) -> Optional[str]: ...
    def invocation_metadata(self) -> Sequence[Tuple[str, str]]: ...
    def set_trailing_metadata(self, metadata: Sequence[Tuple[str, str]]) -> None: ...
    def set_compression(self, compression: int) -> None: ...
    def set_code(self, code: Any) -> None: ...
    def set_details(self, details: str) -> None: ...
    def disable_next_message_compression(self) -> None: ...
    def abort(self, code: int, details: str) -> None: ...
    def abort_with_status(self, status: Any) -> None: ...
    def is_active(self) -> bool: ...
    def time_remaining(self) -> Optional[float]: ...
    def add_callback(self, callback: Any) -> bool: ...
    def send_initial_metadata(
        self, initial_metadata: Sequence[Tuple[str, str]]
    ) -> None: ...
    def cancel(self) -> None: ...
    def auth_context(self) -> Dict[str, Any]: ...
