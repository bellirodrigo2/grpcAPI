"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import inner.inner_pb2
import multi.inner.class_pb2
import other_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _UserCode:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _UserCodeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_UserCode.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    EMPLOYEE: _UserCode.ValueType  # 0
    SCHOOL: _UserCode.ValueType  # -247
    INACTIVE: _UserCode.ValueType  # 1

class UserCode(_UserCode, metaclass=_UserCodeEnumTypeWrapper): ...

EMPLOYEE: UserCode.ValueType  # 0
SCHOOL: UserCode.ValueType  # -247
INACTIVE: UserCode.ValueType  # 1
global___UserCode = UserCode

@typing.final
class User(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class DictEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing.final
    class MapMsgEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        @property
        def value(self) -> inner.inner_pb2.InnerMessage: ...
        def __init__(
            self,
            *,
            key: builtins.int = ...,
            value: inner.inner_pb2.InnerMessage | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing.final
    class MapCodesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: global___UserCode.ValueType
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___UserCode.ValueType = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    CODE_FIELD_NUMBER: builtins.int
    AGE_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    AFFILLIATION_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    OTHER_FIELD_NUMBER: builtins.int
    EMPLOYEE_FIELD_NUMBER: builtins.int
    SCHOOL_FIELD_NUMBER: builtins.int
    INACTIVE_FIELD_NUMBER: builtins.int
    DICT_FIELD_NUMBER: builtins.int
    OTHERS_FIELD_NUMBER: builtins.int
    MSG_FIELD_NUMBER: builtins.int
    MAP_MSG_FIELD_NUMBER: builtins.int
    CODES_FIELD_NUMBER: builtins.int
    MAP_CODES_FIELD_NUMBER: builtins.int
    code: global___UserCode.ValueType
    affilliation: builtins.str
    name: builtins.str
    employee: builtins.str
    school: builtins.str
    inactive: builtins.bool
    @property
    def age(self) -> inner.inner_pb2.InnerMessage: ...
    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def other(self) -> other_pb2.Other: ...
    @property
    def dict(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
    @property
    def others(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[other_pb2.Other]: ...
    @property
    def msg(self) -> multi.inner.class_pb2.ClassMsg: ...
    @property
    def map_msg(self) -> google.protobuf.internal.containers.MessageMap[builtins.int, inner.inner_pb2.InnerMessage]: ...
    @property
    def codes(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___UserCode.ValueType]: ...
    @property
    def map_codes(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, global___UserCode.ValueType]: ...
    def __init__(
        self,
        *,
        code: global___UserCode.ValueType = ...,
        age: inner.inner_pb2.InnerMessage | None = ...,
        time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        affilliation: builtins.str = ...,
        name: builtins.str = ...,
        other: other_pb2.Other | None = ...,
        employee: builtins.str = ...,
        school: builtins.str = ...,
        inactive: builtins.bool = ...,
        dict: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        others: collections.abc.Iterable[other_pb2.Other] | None = ...,
        msg: multi.inner.class_pb2.ClassMsg | None = ...,
        map_msg: collections.abc.Mapping[builtins.int, inner.inner_pb2.InnerMessage] | None = ...,
        codes: collections.abc.Iterable[global___UserCode.ValueType] | None = ...,
        map_codes: collections.abc.Mapping[builtins.str, global___UserCode.ValueType] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["age", b"age", "employee", b"employee", "inactive", b"inactive", "msg", b"msg", "occupation", b"occupation", "other", b"other", "school", b"school", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["affilliation", b"affilliation", "age", b"age", "code", b"code", "codes", b"codes", "dict", b"dict", "employee", b"employee", "inactive", b"inactive", "map_codes", b"map_codes", "map_msg", b"map_msg", "msg", b"msg", "name", b"name", "occupation", b"occupation", "other", b"other", "others", b"others", "school", b"school", "time", b"time"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["occupation", b"occupation"]) -> typing.Literal["employee", "school", "inactive"] | None: ...

global___User = User
